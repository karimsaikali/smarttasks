function generateId(prefix) {
  
  var base = "0123456789abcdefghijklmnopqrstuvwxyz";
  var max = 20;
  var id = "";
  for (var i = 0; i < max; i++) {
    
    var index = Math.round(Math.random() * (base.length - 1));
    id += base[index];
  }
  
  if (prefix) {
    return prefix + id;
  }else {
    return id;    
  }
}

/**
 * Generates random lat and long within a given permieter, based on initial coordinates and radius
 * @param {Numeric} lat: initial lattitude
 * @param {Numeric} long: initial longitude
 * @param {Numeric} radius: max distance from initial point, in meters
 */
function randomLocation(lat, long, radius) {
  
  var r = radius/111300;
  var y0 = lat;
  var x0 = long
  var u = Math.random();
  var v = Math.random();
  var w = r * Math.sqrt(u);
  var t = 2 * Math.PI * v;
  var x = w * Math.cos(t);
  var y1 = w * Math.sin(t);
  var x1 = x / Math.cos(y0);
  var newY = y0 + y1
  var newX = x0 + x1
  return {
    lat:newY,
    long:newX
  };
}

/**
 * Turns a string "lat,long" into a {lat:the_lat, long:the_long}
 * @function toPoint
 * @param {String} location, i.e. "lat,long"
 * @return {Object} {lat, long}
 */
function toPoint(location) {
  
  var loc = location.split(",");
  return {
    
    latitude:Number(loc[0]),
    longitude: Number(loc[1])
  };
}

/**
 * @function isPointInCircle
 */
function isPointInCircle(point1, point2, radius) {
  
  var distance = getDistanceFromLatLon(point1.latitude, point1.longitude, point2.latitude, point2.longitude);
  var log = require("log");log.setLevel("info"); log.info("DISTANCE " + distance);
  return distance <= radius;
}

/**
 * @getDistanceFromLatLon
 */
function getDistanceFromLatLon(lat1, lon1, lat2, lon2) {
  
  var R = 6371; // Radius of the earth in km
  var dLat = deg2rad(lat2-lat1);  // deg2rad below
  var dLon = deg2rad(lon2-lon1); 
  var a = 
    Math.sin(dLat/2) * Math.sin(dLat/2) +
    Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * 
    Math.sin(dLon/2) * Math.sin(dLon/2)
    ; 
  var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); 
  var d = R * c; // Distance in km
  return d * 1000; // distance in m
}

/**
 * @function deg2rad
 */
function deg2rad(deg) {
  return deg * (Math.PI/180)
}

/**
 * @function isNumber
 */
function isNumber(n) {
  return !isNaN(parseFloat(n)) && isFinite(n);
}

/**
 * If "acc" value is "set", then from a given property name, return the corresponding setter name, adopting the following pattern:
 * if property name is myProperty, return setMyProperty.
 * If "acc" value if "get", then from a given property name return the corresponding getter name: myProperty ==> getMyProperty
 * if type is specified and type == "boolean", myProperty ==> isMyProperty, type == "array", myProperty ==> listMyProperty
 * @function getAccessorName
 * @param {Object} [params]
 * @param {String} property
 * @param {String} op (defaults to "set")
 * @param {String} type (one of "boolean" of "array", other types are not considered)
 */
function getAccessorName(params) {
  
  var type = params.type ? params.type.toLowerCase() : "";
  var op = params.op ? params.op.toLowerCase() : "set";
  var first = params.property.substring(0, 1).toUpperCase();
  var last = params.property.substring(1);
  var prefix = "set";
  if (op != "set") {
   
    switch(type) {
      
      case "array": prefix = "list";break;
      case "boolean": prefix = "is";break;
      default: prefix = "get";
  	}
  }
  
  return prefix + first + last;
}